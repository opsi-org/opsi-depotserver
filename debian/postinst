#! /bin/bash -e

# = = = = = = = = = = = = = = = = = = = = = = =
# =  Copyright (C) 2006, 2007, 2008 uib GmbH  =
# =           http://www.uib.de               =
# =          All rights reserved.             =
# = = = = = = = = = = = = = = = = = = = = = = =

# summary of how this script can be called:
#        * <postinst> `configure' <most-recently-configured-version>
#        * <old-postinst> `abort-upgrade' <new version>
#        * <conflictor's-postinst> `abort-remove' `in-favour' <package>
#          <new-version>
#        * <deconfigured's-postinst> `abort-deconfigure' `in-favour'
#          <failed-install-package> <version> `removing'
#          <conflicting-package> <version>
# for details, see http://www.debian.org/doc/debian-policy/ or
# the debian-policy package
#

. /usr/share/debconf/confmodule

VERBOSE=true

case "$1" in
    configure)
    	HOSTNAME=`uname -n`
	DOMAIN=`hostname -d`
	FQDN=`hostname --fqdn`
	IPADDRESS=`getent hosts $FQDN | cut -d' ' -f1`
	
	for iface in `ifconfig -a | grep "^[[:alnum:]]" | cut -d " " -f 1`; do
	    ip=`ifconfig $iface | grep "\:[[:digit:]]*\." | sed "s/:/ /g" | awk '{ printf $3}'`
	    NETMASK=`ifconfig $iface | grep "\:[[:digit:]]*\." | sed "s/:/ /g" | awk '{ printf $7}'`
	    GATEWAY=`route -n | grep ^0.0.0.0 | awk '{ printf $2}'`
	    if [ "$ip" != "" ]; then
	        if [ "$IPADDRESS" = "" ]; then
		    IPADDRESS="$ip"
		fi
		[ "$IPADDRESS" = "$ip" ] && break
	    fi
	done
	
	[ "$NETMASK" = "" ] && NETMASK="255.255.225.0"
	
	if [ "$IPADDRESS" != "" ]; then
	    for part in 1 2 3 4; do
		I[$part]=$(echo $IPADDRESS | cut -d . -f $part)
		M[$part]=$(echo $NETMASK | cut -d . -f $part)
	    done
		    
	    for part in 1 2 3 4; do
		N[$part]=$((${I[$part]} & ${M[$part]}))
	        B[$part]=$((${N[$part]} | $((${M[$part]} ^255))))
	    done
	
	    SUBNET="${N[1]}.${N[2]}.${N[3]}.${N[4]}"
	    BROADCAST="${B[1]}.${B[2]}.${B[3]}.${B[4]}"
	fi
	
	WINDOMAIN=`grep -i ^[[:space:]]*workgroup /etc/samba/smb.conf | cut -d'=' -f 2 | sed s'/ //g'`
	
	$VERBOSE && echo -e "\nSystem information"
	$VERBOSE && echo "  -> IP-Address: $IPADDRESS"
	$VERBOSE && echo "  -> Broadcast: $BROADCAST"
	$VERBOSE && echo "  -> Netmask: $NETMASK"
	$VERBOSE && echo "  -> Subnet: $SUBNET"
	$VERBOSE && echo "  -> Gateway: $GATEWAY"
	$VERBOSE && echo "  -> Hostname: $HOSTNAME"
	$VERBOSE && echo "  -> Domain: $DOMAIN"
	$VERBOSE && echo "  -> Fqdn: $FQDN"
	$VERBOSE && echo "  -> Windomain: $WINDOMAIN"
	
	if [ `echo $FQDN | sed 's/\./ /g' | wc -w` -le 2 ]; then
		echo -e "\nThe hostname $FQDN returned by 'hostname --fqdn' is not a fully qualified domain name"
		echo "Opsi needs a fully qualified domain name in the form of <hostname>.<domain>.<tld>"
		exit 1
	fi
	
	if [ -f /var/lib/opsi/config/global.ini ]; then
		set +e
		grep "@HOSTNAME@" /var/lib/opsi/config/global.ini >/dev/null 2>/dev/null	
		status=$?
		set -e
		if [ $status = 0 ]; then
			cp /var/lib/opsi/config/global.ini /var/lib/opsi/config/global.ini.tmp
			cat /var/lib/opsi/config/global.ini.tmp | sed "s/@HOSTNAME@/$HOSTNAME/g" > /var/lib/opsi/config/global.ini
			rm /var/lib/opsi/config/global.ini.tmp
		fi
		set +e
		grep "@WINDOMAIN@" /var/lib/opsi/config/global.ini >/dev/null 2>/dev/null	
		status=$?
		set -e
		if [ $status = 0 ]; then
			cp /var/lib/opsi/config/global.ini /var/lib/opsi/config/global.ini.tmp
			cat /var/lib/opsi/config/global.ini.tmp | sed "s/@WINDOMAIN@/$WINDOMAIN/g" > /var/lib/opsi/config/global.ini
			rm /var/lib/opsi/config/global.ini.tmp
		fi
		set +e
		grep "@FQDN@" /var/lib/opsi/config/global.ini >/dev/null 2>/dev/null	
		status=$?
		set -e
		if [ $status = 0 ]; then
			cp /var/lib/opsi/config/global.ini /var/lib/opsi/config/global.ini.tmp
			cat /var/lib/opsi/config/global.ini.tmp | sed "s/@FQDN@/$FQDN/g" > /var/lib/opsi/config/global.ini
			rm /var/lib/opsi/config/global.ini.tmp
		fi
		set +e
		grep "@IPADDRESS@" /var/lib/opsi/config/global.ini >/dev/null 2>/dev/null	
		status=$?
		set -e
		if [ $status = 0 ]; then
			cp /var/lib/opsi/config/global.ini /var/lib/opsi/config/global.ini.tmp
			cat /var/lib/opsi/config/global.ini.tmp | sed "s/@IPADDRESS@/$IPADDRESS/g" > /var/lib/opsi/config/global.ini
			rm /var/lib/opsi/config/global.ini.tmp
		fi
	fi
	
	$VERBOSE && echo -e "\nAdding system users and groups..."
	
	# add system group pcpatch and users pcpatch
	$VERBOSE && echo "  -> Adding group pcpatch"
	if [ -z "`getent group pcpatch`" ]; then
		groupadd -g 992 pcpatch
	fi
		
	$VERBOSE && echo "  -> Adding user pcpatch"
	if [ -z "`getent passwd pcpatch`" ]; then
		useradd -u 992 -g 992 -d /opt/pcbin/pcpatch -s /bin/bash pcpatch
	fi
	
	$VERBOSE && echo "  -> Adding user opsiconfd"
	if [ -z "`getent passwd opsiconfd`" ]; then
		useradd -u 993 -g 992 -d /var/lib/opsi -s /bin/bash opsiconfd
	fi
	
	if ! [ -e /var/lib/opsi/config/depots/$FQDN ]; then
		mkdir -p /var/lib/opsi/config/depots/$FQDN
	fi
	
	# file permissions
	$VERBOSE && echo -e "\nSetting permissions..."
	chown -R opsiconfd:pcpatch /etc/opsi/backendManager.d
	chmod 0660 /etc/opsi/backendManager.d/*
	chown -R opsiconfd:pcpatch /opt/pcbin/pcpatch
	chmod 2770 /opt/pcbin/pcpatch
	chown -R opsiconfd:pcpatch /opt/pcbin/pcpatch/pclog
	chmod 2770 /opt/pcbin/pcpatch/pclog
	chown -R opsiconfd:pcpatch /opt/pcbin/utils
	chmod 2770 /opt/pcbin/utils
	chown -R opsiconfd:pcpatch /opt/pcbin/install
	chmod 2770 /opt/pcbin/install
	chown -R opsiconfd:pcpatch /tftpboot/linux
	chmod 2775 /tftpboot/linux
	chmod 2775 /tftpboot/linux/pxelinux.cfg
	find /tftpboot/linux -type f -exec chmod 664 {} \;
	chown -R opsiconfd:pcpatch /var/lib/opsi
	chmod 2750 /var/lib/opsi
	chmod 2770 /var/lib/opsi/products
	chmod 0660 /var/lib/opsi/products/* >/dev/null 2>/dev/null || true
	chmod 2770 /var/lib/opsi/config
	chmod 2770 /var/lib/opsi/config/clients
	chmod 2770 /var/lib/opsi/config/templates
	chmod 2770 /var/lib/opsi/config/depots
	chmod 2770 -R /var/lib/opsi/config/depots
	find /var/lib/opsi/config/depots -type f -exec chmod 660 {} \;
	chmod 2770 /var/lib/opsi/audit
	chmod 0660 /var/lib/opsi/audit/* >/dev/null 2>/dev/null || true
	chmod 0660 /var/lib/opsi/config/templates/pcproto.ini
	chmod 0660 /var/lib/opsi/config/global.ini
	chown opsiconfd:pcpatch /var/log/opsi
	chmod 2770 /var/log/opsi
	chown pcpatch:pcpatch /home/opsiproducts
	chmod 2770 /home/opsiproducts
	
	db_get opsi/configure_samba
	if [ "$RET" = "true" ]; then
		$VERBOSE && echo -e "\nConfiguring samba..."	
		if [ -f /etc/samba/smb.conf ]; then
			# Removing include created by opsi-depotserver < 3.3
			cp /etc/samba/smb.conf /etc/samba/smb.conf.opsi-configure
			cat /etc/samba/smb.conf.opsi-configure \
				| grep -v '; load opsi shares' \
				| grep -v 'include = /etc/samba/share.conf' \
				> /etc/samba/smb.conf
			rm /etc/samba/smb.conf.opsi-configure
			
			$VERBOSE && echo "  -> Testing if share [opt_pcbin] already exists"
			set +e
			grep "^\[opt_pcbin\]" /etc/samba/smb.conf >/dev/null 2>/dev/null	
			status=$?
			set -e
			if [ $status = 0 ]; then
				$VERBOSE && echo "      * share exists"
			else
				$VERBOSE && echo "      * adding share"
				echo "" 				>> /etc/samba/smb.conf
				echo "[opt_pcbin]" 			>> /etc/samba/smb.conf
				echo " available = yes" 		>> /etc/samba/smb.conf
				echo " comment = opsi depot share" 	>> /etc/samba/smb.conf
				echo " path = /opt/pcbin" 		>> /etc/samba/smb.conf
				echo " oplocks = no" 			>> /etc/samba/smb.conf
				echo " level2 oplocks = no"  		>> /etc/samba/smb.conf
				echo " writeable = yes" 		>> /etc/samba/smb.conf
				echo " invalid users = root" 		>> /etc/samba/smb.conf
			fi
			
			$VERBOSE && echo "  -> Testing if share [opsi_config] already exists"
			set +e
			grep "^\[opsi_config\]" /etc/samba/smb.conf >/dev/null 2>/dev/null
			status=$?
			set -e
			if [ $status = 0 ]; then
				$VERBOSE && echo "      * share exists"
			else
				$VERBOSE && echo "      * adding share"
				echo "" 				>> /etc/samba/smb.conf
				echo "[opsi_config]" 			>> /etc/samba/smb.conf
				echo " available = yes"			>> /etc/samba/smb.conf
				echo " comment = opsi config share" 	>> /etc/samba/smb.conf
				echo " path = /var/lib/opsi/config" 	>> /etc/samba/smb.conf
				echo " writeable = yes" 		>> /etc/samba/smb.conf
				echo " invalid users = root" 		>> /etc/samba/smb.conf
			fi
			
			$VERBOSE && echo "  -> Testing if share [opsi_workbench] already exists"
			set +e
			grep "^\[opsi_workbench\]" /etc/samba/smb.conf >/dev/null 2>/dev/null
			status=$?
			set -e
			if [ $status = 0 ]; then
				$VERBOSE && echo "      * share exists"
			else
				$VERBOSE && echo "      * adding share"
				echo "" 				>> /etc/samba/smb.conf
				echo "[opsi_workbench]" 		>> /etc/samba/smb.conf
				echo " available = yes"			>> /etc/samba/smb.conf
				echo " comment = opsi workbench" 	>> /etc/samba/smb.conf
				echo " path = /home/opsiproducts" 	>> /etc/samba/smb.conf
				echo " writeable = yes" 		>> /etc/samba/smb.conf
				echo " invalid users = root" 		>> /etc/samba/smb.conf
				echo " create mask = 0660"		>> /etc/samba/smb.conf
				echo " directory mask = 0770"		>> /etc/samba/smb.conf
			fi
		else
			echo "        * /etc/samba/smb.conf not found!"
			echo "        * you will have to configure samba manually!"
			echo "        * look in /usr/share/opsi-depotserver for examples."
		fi
	fi
	
	db_get opsi/configure_dhcpd
	if [ "$RET" = "true" ]; then
		# dhcp-server
	        echo -e "\nConfiguring dhcpd..."
		if [ -f /etc/dhcp3/dhcpd.conf ]; then
			set +e
			cat /etc/dhcp3/dhcpd.conf | grep "ldap-server" >/dev/null 2>/dev/null	
			status=$?
			set -e
			if [ $status = 0 ]; then
				$VERBOSE && echo "        * DHCPD configured by LDAP, leaving as is!"
			else
				extension=`date +%F_%R`
				$VERBOSE && echo "        * Saving current dhcpd.conf to dhcpd.conf.$extension"
				cp -p /etc/dhcp3/dhcpd.conf /etc/dhcp3/dhcpd.conf.$extension
				$VERBOSE && echo "        * Patching dhcpd.conf"
				cat << EOF | /usr/bin/python
import sys
from OPSI.Backend.DHCPD import *

nextserver = "$IPADDRESS"
filename = "linux/pxelinux.0"
subnet = "$SUBNET"
netmask = "$NETMASK"

config = Config("/etc/dhcp3/dhcpd.conf")
config._parseConfig()

print ""

if config._globalBlock.getParameters_hash().get('use-host-decl-names', False):
	print "               use-host-decl-names already enabled"
else:
	p = Parameter(
		startLine 	= -1,
		parentBlock 	= config._globalBlock,
		key 		= 'use-host-decl-names',
		value 		= True )
	config._globalBlock.addComponent(p)

subnets = config._globalBlock.getBlocks('subnet', recursive = True)
if not subnets:
	print "                  no subnets found, adding subnet"
	config._globalBlock.addComponent(
		Block( 
			startLine 	= -1,
			parentBlock 	= config._globalBlock,
			type 		= 'subnet',
			settings 	= ['subnet', subnet, 'netmask', netmask] )
	)

for subnet in config._globalBlock.getBlocks('subnet', recursive = True):
	print "\n               Subnet %s/%s found" % (subnet.settings[1], subnet.settings[3])
	groups = subnet.getBlocks('group')
	if not groups:
		print "                  no groups found, adding group"
		subnet.addComponent(
			Block( 
				startLine 	= -1,
				parentBlock 	= subnet,
				type 		= 'group',
				settings 	= ['group'] )
		)
	for group in subnet.getBlocks('group'):
		print "                  configuring group"
		params = group.getParameters_hash(inherit = 'global')
		if params.get('next-server'):
			print "                     next-server already set"
		else:
			group.addComponent(
				Parameter(
					startLine 	= -1,
					parentBlock 	= group,
					key 		= 'next-server',
					value 		= nextserver ) )
			print "                     next-server set to %s" % nextserver
		if params.get('filename'):
			print "                     filename already set"
		else:
			group.addComponent(
				Parameter(
					startLine 	= -1,
					parentBlock 	= group,
					key 		= 'filename',
					value 		= filename ) )
			print "                     filename set to %s" % filename
config.writeConfig()
print ""
EOF

			chown root:pcpatch /etc/dhcp3/dhcpd.conf
			chmod 664 /etc/dhcp3/dhcpd.conf
			fi
		else
			echo "        * /etc/dhcp3/dhcpd.conf not found!"
			echo "        * you will have to configure dhcpd manually!"
			echo "        * look in /usr/share/opsi-depotserver for examples."
		fi
	fi
	
	set +e
	cat /etc/sudoers | grep "/etc/init.d/dhcp3-server restart" >/dev/null 2>/dev/null	
	status=$?
	set -e
	if [ $status = 0 ]; then
		rm /tmp/sudoers 2>/dev/null || true
		touch /tmp/sudoers
		chmod 600 /tmp/sudoers
		cat /etc/sudoers > /tmp/sudoers
		cat /tmp/sudoers | grep -v "/etc/init.d/dhcp3-server restart" > /etc/sudoers
		rm /tmp/sudoers
	fi
	echo "opsiconfd ALL=NOPASSWD: /etc/init.d/dhcp3-server restart" >> /etc/sudoers
	
	touch /etc/opsi/pckeys
	touch /etc/opsi/passwd
	
	set +e
	/usr/bin/opsi-admin -d method getPcpatchPassword $FQDN >/dev/null 2>/dev/null	
	status=$?
	set -e
	if [ $status != 0 ]; then
		# No password set
		/usr/bin/opsi-admin -d method createServer "$HOSTNAME" "$DOMAIN" > /dev/null
		
		db_get opsi/pcpatch_password1
		/usr/bin/opsi-admin -d task setPcpatchPassword $RET
	fi
	
	/usr/bin/opsi-admin -d method getPcpatchRSAPrivateKey >/dev/null 2>/dev/null || true
	
	eval `opsi-admin -ds method getNetworkConfig_hash | grep nextBootServiceURL`
	if [ "$nextBootServiceURL" = "" ]; then
		/usr/bin/opsi-admin -d method setNetworkConfig `/usr/bin/opsi-admin -d method getNetworkConfig_hash | sed "s/\"nextBootServiceURL.*/\"nextBootServiceURL\" : \"https:\/\/${IPADDRESS}:4447\", /" | tr -d '\n' | sed "s/^/'/" | sed "s/$/'/"` "$DOMAIN"
	fi
	
	chown opsiconfd:pcpatch /etc/opsi/pckeys
	chmod 660 /etc/opsi/pckeys
	chown opsiconfd:pcpatch /etc/opsi/passwd
	chmod 660 /etc/opsi/passwd
	
	db_get opsi/configure_dhcpd
	if [ "$RET" = "true" ]; then
		echo "Restarting dhcp server..."
		/etc/init.d/dhcp3-server restart >/dev/null 2>/dev/null || true
	fi
	
	db_get opsi/configure_samba
	if [ "$RET" = "true" ]; then
		echo "Reloading samba..."
		/etc/init.d/samba reload >/dev/null 2>/dev/null || true
	fi
		
    ;;
    
    abort-upgrade|abort-remove|abort-deconfigure)

    ;;

    *)
        echo "postinst called with unknown argument \`$1'" >&2
        exit 1
    ;;
esac

db_stop

exit 0

